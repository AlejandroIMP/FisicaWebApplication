---
interface Props {
  id: string;
  title: string;
  maxForces?: number;
}

const { id, title, maxForces = 5 } = Astro.props;
---

<div class="multiple-forces-container" id={`${id}-container`}>
  <div class="forces-header">
    <h4>{title}</h4>
    <div class="forces-controls">
      <button type="button" class="add-force-btn" id={`${id}-add`}>
        <span class="icon">‚ûï</span>
        Agregar Fuerza
      </button>
      <button type="button" class="clear-forces-btn" id={`${id}-clear`}>
        <span class="icon">üóëÔ∏è</span>
        Limpiar Todo
      </button>
      <button type="button" class="load-example-btn" id={`${id}-example`}>
        <span class="icon">üìù</span>
        Cargar Ejemplo
      </button>
    </div>
  </div>
  
  <div class="forces-list" id={`${id}-list`}>
    <!-- Las fuerzas se agregar√°n din√°micamente aqu√≠ -->
  </div>
  
  <div class="net-force-preview" id={`${id}-preview`}>
    <div class="preview-content">
      <strong>Vista Previa de Fuerza Neta:</strong>
      <div class="preview-components">
        <span id={`${id}-fx-preview`}>Fx = 0 N</span>
        <span id={`${id}-fy-preview`}>Fy = 0 N</span>
      </div>
      <div class="preview-result">
        <span id={`${id}-magnitude-preview`}>|F_net| = 0 N</span>
        <span id={`${id}-angle-preview`}>Œ∏ = 0¬∞</span>
      </div>
    </div>
  </div>
</div>

<style>
.multiple-forces-container {
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
  border: 2px solid #dee2e6;
  border-radius: 12px;
  padding: 1.5rem;
  margin: 1rem 0;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.forces-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
  flex-wrap: wrap;
  gap: 1rem;
}

.forces-header h4 {
  margin: 0;
  color: #495057;
  font-size: 1.2rem;
}

.forces-controls {
  display: flex;
  gap: 0.5rem;
  flex-wrap: wrap;
}

.forces-controls button {
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 0.9rem;
  font-weight: 500;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.add-force-btn {
  background: linear-gradient(135deg, #28a745, #20c997);
  color: white;
}

.add-force-btn:hover {
  background: linear-gradient(135deg, #218838, #1ea080);
  transform: translateY(-2px);
}

.clear-forces-btn {
  background: linear-gradient(135deg, #dc3545, #e74c3c);
  color: white;
}

.clear-forces-btn:hover {
  background: linear-gradient(135deg, #c82333, #dc2626);
  transform: translateY(-2px);
}

.load-example-btn {
  background: linear-gradient(135deg, #007bff, #0056b3);
  color: white;
}

.load-example-btn:hover {
  background: linear-gradient(135deg, #0056b3, #004085);
  transform: translateY(-2px);
}

.forces-list {
  margin: 1rem 0;
}

.force-item {
  background: white;
  border: 1px solid #e9ecef;
  border-radius: 8px;
  padding: 1rem;
  margin-bottom: 1rem;
  position: relative;
  transition: all 0.3s ease;
}

.force-item:hover {
  border-color: #007bff;
  box-shadow: 0 2px 8px rgba(0, 123, 255, 0.1);
}

.force-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.force-title {
  font-weight: bold;
  color: #495057;
}

.remove-force-btn {
  background: #dc3545;
  color: white;
  border: none;
  border-radius: 4px;
  padding: 0.25rem 0.5rem;
  cursor: pointer;
  font-size: 0.8rem;
}

.force-inputs {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
}

.force-input-group {
  display: flex;
  flex-direction: column;
}

.force-input-group label {
  font-size: 0.9rem;
  color: #6c757d;
  margin-bottom: 0.25rem;
}

.force-input-group input,
.force-input-group select {
  padding: 0.5rem;
  border: 1px solid #ced4da;
  border-radius: 4px;
  font-size: 0.9rem;
}

.net-force-preview {
  background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
  border: 1px solid #2196f3;
  border-radius: 8px;
  padding: 1rem;
  margin-top: 1rem;
}

.preview-content {
  text-align: center;
}

.preview-components {
  display: flex;
  justify-content: center;
  gap: 2rem;
  margin: 0.5rem 0;
  flex-wrap: wrap;
}

.preview-result {
  display: flex;
  justify-content: center;
  gap: 2rem;
  margin-top: 0.5rem;
  flex-wrap: wrap;
  font-weight: bold;
  color: #1976d2;
}

@media (max-width: 768px) {
  .forces-header {
    flex-direction: column;
    align-items: stretch;
  }
  
  .forces-controls {
    justify-content: center;
  }
  
  .force-inputs {
    grid-template-columns: 1fr;
  }
  
  .preview-components,
  .preview-result {
    flex-direction: column;
    gap: 0.5rem;
  }
}
</style>

<script>
interface Force {
  id: number;
  magnitude: number;
  angle: number;
  unit: string;
}

class MultipleForces {
  private container: HTMLElement;
  private list: HTMLElement;
  private addBtn: HTMLElement;
  private clearBtn: HTMLElement;
  private exampleBtn: HTMLElement;
  private forces: Force[] = [];
  private forceCounter = 0;
  private maxForces: number;
  private id: string;

  constructor(id: string, maxForces: number = 5) {
    this.id = id;
    this.maxForces = maxForces;
    this.container = document.getElementById(`${id}-container`)!;
    this.list = document.getElementById(`${id}-list`)!;
    this.addBtn = document.getElementById(`${id}-add`)!;
    this.clearBtn = document.getElementById(`${id}-clear`)!;
    this.exampleBtn = document.getElementById(`${id}-example`)!;
    
    this.init();
  }

  private init() {
    this.addBtn.addEventListener('click', () => this.addForce());
    this.clearBtn.addEventListener('click', () => this.clearAllForces());
    this.exampleBtn.addEventListener('click', () => this.loadExample());
    
    // Agregar una fuerza inicial
    this.addForce();
  }

  private addForce(magnitude: number = 0, angle: number = 0, unit: string = 'N') {
    if (this.forces.length >= this.maxForces) {
      this.showNotification(`M√°ximo ${this.maxForces} fuerzas permitidas`, 'warning');
      return;
    }

    const force: Force = {
      id: ++this.forceCounter,
      magnitude,
      angle,
      unit
    };

    this.forces.push(force);
    this.renderForce(force);
    this.updatePreview();
    this.updateAddButtonState();
  }

  private renderForce(force: Force) {
    const forceElement = document.createElement('div');
    forceElement.className = 'force-item';
    forceElement.id = `force-${force.id}`;
    
    forceElement.innerHTML = `
      <div class="force-header">
        <span class="force-title">Fuerza ${force.id}</span>
        <button class="remove-force-btn" onclick="multipleForces.removeForce(${force.id})">
          ‚úñ Eliminar
        </button>
      </div>
      <div class="force-inputs">
        <div class="force-input-group">
          <label for="magnitude-${force.id}">Magnitud:</label>
          <input 
            type="number" 
            id="magnitude-${force.id}" 
            value="${force.magnitude}"
            step="0.01"
            oninput="multipleForces.updateForce(${force.id}, 'magnitude', this.value)"
          >
        </div>
        <div class="force-input-group">
          <label for="angle-${force.id}">√Ångulo (¬∞):</label>
          <input 
            type="number" 
            id="angle-${force.id}" 
            value="${force.angle}"
            step="0.1"
            oninput="multipleForces.updateForce(${force.id}, 'angle', this.value)"
          >
        </div>
        <div class="force-input-group">
          <label for="unit-${force.id}">Unidad:</label>
          <select 
            id="unit-${force.id}" 
            onchange="multipleForces.updateForce(${force.id}, 'unit', this.value)"
          >
            <option value="N" ${force.unit === 'N' ? 'selected' : ''}>N</option>
            <option value="kN" ${force.unit === 'kN' ? 'selected' : ''}>kN</option>
            <option value="dyn" ${force.unit === 'dyn' ? 'selected' : ''}>dyn</option>
            <option value="lbf" ${force.unit === 'lbf' ? 'selected' : ''}>lbf</option>
          </select>
        </div>
      </div>
    `;

    this.list.appendChild(forceElement);
  }

  public removeForce(forceId: number) {
    this.forces = this.forces.filter(f => f.id !== forceId);
    const element = document.getElementById(`force-${forceId}`);
    if (element) {
      element.remove();
    }
    this.updatePreview();
    this.updateAddButtonState();
  }

  public updateForce(forceId: number, property: keyof Force, value: string) {
    const force = this.forces.find(f => f.id === forceId);
    if (force) {
      if (property === 'magnitude' || property === 'angle') {
        (force as any)[property] = parseFloat(value) || 0;
      } else {
        (force as any)[property] = value;
      }
      this.updatePreview();
    }
  }

  private updatePreview() {
    const netForce = this.calculateNetForce();
    
    document.getElementById(`${this.id}-fx-preview`)!.textContent = `Fx = ${netForce.fx.toFixed(2)} N`;
    document.getElementById(`${this.id}-fy-preview`)!.textContent = `Fy = ${netForce.fy.toFixed(2)} N`;
    document.getElementById(`${this.id}-magnitude-preview`)!.textContent = `|F_net| = ${netForce.magnitude.toFixed(2)} N`;
    document.getElementById(`${this.id}-angle-preview`)!.textContent = `Œ∏ = ${netForce.angle.toFixed(1)}¬∞`;
  }

  private calculateNetForce() {
    let fx = 0;
    let fy = 0;

    this.forces.forEach(force => {
      const magnitudeInN = this.convertToNewtons(force.magnitude, force.unit);
      const angleRad = (force.angle * Math.PI) / 180;
      
      fx += magnitudeInN * Math.cos(angleRad);
      fy += magnitudeInN * Math.sin(angleRad);
    });

    const magnitude = Math.sqrt(fx * fx + fy * fy);
    const angle = Math.atan2(fy, fx) * (180 / Math.PI);

    return { fx, fy, magnitude, angle };
  }

  private convertToNewtons(value: number, unit: string): number {
    const conversions: { [key: string]: number } = {
      'N': 1,
      'kN': 1000,
      'dyn': 1e-5,
      'lbf': 4.448,
      'kgf': 9.807
    };
    return value * (conversions[unit] || 1);
  }

  private updateAddButtonState() {
    if (this.forces.length >= this.maxForces) {
      this.addBtn.style.opacity = '0.5';
      this.addBtn.style.pointerEvents = 'none';
    } else {
      this.addBtn.style.opacity = '1';
      this.addBtn.style.pointerEvents = 'auto';
    }
  }

  private clearAllForces() {
    this.forces = [];
    this.list.innerHTML = '';
    this.updatePreview();
    this.updateAddButtonState();
    this.addForce(); // Agregar una fuerza inicial
  }

  private loadExample() {
    this.clearAllForces();
    // Ejemplo: Dos fuerzas perpendiculares
    this.addForce(50, 0, 'N');     // 50 N hacia la derecha
    this.addForce(30, 90, 'N');    // 30 N hacia arriba
    this.addForce(20, 180, 'N');   // 20 N hacia la izquierda
  }

  private showNotification(message: string, type: 'success' | 'warning' | 'error' = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 1rem 1.5rem;
      border-radius: 8px;
      color: white;
      font-weight: 500;
      z-index: 1000;
      animation: slideIn 0.3s ease-out;
    `;
    
    const colors = {
      success: '#28a745',
      warning: '#ffc107',
      error: '#dc3545'
    };
    
    notification.style.background = colors[type];
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.style.animation = 'slideOut 0.3s ease-out';
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  public getNetForce() {
    return this.calculateNetForce();
  }

  public getForces() {
    return this.forces;
  }
}

// Instancia global para acceso desde el HTML
let multipleForces: MultipleForces;

document.addEventListener('DOMContentLoaded', function() {
  const container = document.querySelector('.multiple-forces-container');
  if (container) {
    const id = container.id.replace('-container', '');
    multipleForces = new MultipleForces(id, 5);
    
    // Hacer disponible globalmente
    (window as any).multipleForces = multipleForces;
  }
});
</script>