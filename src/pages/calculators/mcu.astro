---
import CalculatorLayout from "../../layouts/CalculatorLayout.astro";
import '../../styles/mcu.css';
---
<CalculatorLayout title="Movimiento Circular Uniforme" description="Calculadora de Movimiento Circular Uniforme">
  <h1>Movimiento Circular Uniforme</h1>
  <p>
    El movimiento circular uniforme (MCU) es un tipo de movimiento en el que un objeto se desplaza a lo largo de una trayectoria circular con una velocidad constante. Esto significa que la magnitud de la velocidad no cambia, aunque la dirección del movimiento sí lo hace.
  </p>
  
  <div class="calculator-container">
    <div class="calculator">
      <div class="calculator-header">
        <h2>Calculadora MCU</h2>
        <p>Selecciona la incógnita que deseas calcular y completa los valores conocidos</p>
      </div>
      
      <div class="calculator-body">
        <div class="variable-selector">
          <label for="variable-to-solve">Calcular:</label>
          <select id="variable-to-solve" name="variable-to-solve">
            <option value="radius">Radio (r)</option>
            <option value="angularVelocity">Velocidad Angular (ω)</option>
            <option value="linearVelocity">Velocidad Lineal (v)</option>
            <option value="period">Periodo (T)</option>
            <option value="frequency">Frecuencia (f)</option>
            <option value="centripetalAcceleration">Aceleración Centrípeta (a)</option>
            <option value="angularDisplacement">Desplazamiento Angular (θ)</option>
          </select>
        </div>
        
        <div class="input-groups-container">
          <div class="input-group" id="radius-group">
            <label for="radius">Radio (r):</label>
            <div class="input-with-unit">
              <input type="number" id="radius" placeholder="Ingresa el radio">
              <select id="radius-unit" class="unit-selector">
                <option value="m">m</option>
                <option value="cm">cm</option>
                <option value="km">km</option>
              </select>
            </div>
          </div>
          
          <div class="input-group" id="angular-velocity-group">
            <label for="angular-velocity">Velocidad Angular (ω):</label>
            <div class="input-with-unit">
              <input type="number" id="angular-velocity" placeholder="Ingresa la velocidad angular">
              <select id="angular-velocity-unit" class="unit-selector">
                <option value="rad/s">rad/s</option>
                <option value="deg/s">°/s</option>
                <option value="rpm">rpm</option>
              </select>
            </div>
          </div>
          
          <div class="input-group" id="linear-velocity-group">
            <label for="linear-velocity">Velocidad Lineal (v):</label>
            <div class="input-with-unit">
              <input type="number" id="linear-velocity" placeholder="Ingresa la velocidad lineal">
              <select id="linear-velocity-unit" class="unit-selector">
                <option value="m/s">m/s</option>
                <option value="km/h">km/h</option>
                <option value="cm/s">cm/s</option>
              </select>
            </div>
          </div>
          
          <div class="input-group" id="period-group">
            <label for="period">Periodo (T):</label>
            <div class="input-with-unit">
              <input type="number" id="period" placeholder="Ingresa el periodo">
              <select id="period-unit" class="unit-selector">
                <option value="s">s</option>
                <option value="min">min</option>
                <option value="h">h</option>
              </select>
            </div>
          </div>
          
          <div class="input-group" id="frequency-group">
            <label for="frequency">Frecuencia (f):</label>
            <div class="input-with-unit">
              <input type="number" id="frequency" placeholder="Ingresa la frecuencia">
              <select id="frequency-unit" class="unit-selector">
                <option value="Hz">Hz</option>
                <option value="kHz">kHz</option>
                <option value="rpm">rpm</option>
              </select>
            </div>
          </div>
          
          <div class="input-group" id="centripetal-acceleration-group">
            <label for="centripetal-acceleration">Aceleración Centrípeta (a):</label>
            <div class="input-with-unit">
              <input type="number" id="centripetal-acceleration" placeholder="Ingresa la aceleración centrípeta">
              <select id="centripetal-acceleration-unit" class="unit-selector">
                <option value="m/s²">m/s²</option>
                <option value="g">g</option>
                <option value="cm/s²">cm/s²</option>
              </select>
            </div>
          </div>
          
          <div class="input-group" id="time-group">
            <label for="time">Tiempo (t):</label>
            <div class="input-with-unit">
              <input type="number" id="time" placeholder="Ingresa el tiempo">
              <select id="time-unit" class="unit-selector">
                <option value="s">s</option>
                <option value="min">min</option>
                <option value="h">h</option>
              </select>
            </div>
          </div>
          
          <div class="input-group" id="angular-displacement-group">
            <label for="angular-displacement">Desplazamiento Angular (θ):</label>
            <div class="input-with-unit">
              <input type="number" id="angular-displacement" placeholder="Ingresa el desplazamiento angular">
              <select id="angular-displacement-unit" class="unit-selector">
                <option value="rad">rad</option>
                <option value="deg">°</option>
                <option value="rev">vueltas</option>
              </select>
            </div>
          </div>
        </div>
        
        <button id="calculate-btn" class="calculate-button">Calcular</button>
        
        <div class="result-container">
          <div class="result-box">
            <h3>Resultado</h3>
            <div id="result"></div>
            <div id="formula-used"></div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="formulas-container">
      <h3>Fórmulas del MCU</h3>
      <div class="formula-item">
        <span>ω = 2π / T = 2π × f</span>
        <p>Velocidad angular en función del periodo o frecuencia</p>
      </div>
      <div class="formula-item">
        <span>v = ω × r</span>
        <p>Velocidad lineal en función de la velocidad angular y el radio</p>
      </div>
      <div class="formula-item">
        <span>a = v² / r = ω² × r</span>
        <p>Aceleración centrípeta</p>
      </div>
      <div class="formula-item">
        <span>T = 2π × r / v = 2π / ω</span>
        <p>Periodo del movimiento</p>
      </div>
      <div class="formula-item">
        <span>f = 1 / T = ω / 2π</span>
        <p>Frecuencia del movimiento</p>
      </div>
      <div class="formula-item">
        <span>θ = ω × t</span>
        <p>Desplazamiento angular en función del tiempo</p>
      </div>
    </div>
  </div>

  <script>
    import { convertFromBaseUnit, calculate, convertToBaseUnit } from "../../utils/index";
    import { type UnitType } from "../../types/index";
    document.addEventListener('DOMContentLoaded', function() {
      const variableToSolveSelect = document.getElementById('variable-to-solve') as HTMLSelectElement;
      const calculateBtn = document.getElementById('calculate-btn') as HTMLButtonElement;
      const resultDiv = document.getElementById('result') as HTMLDivElement;
      const formulaUsedDiv = document.getElementById('formula-used') as HTMLDivElement;
      
      const inputGroups = {
        radius: document.getElementById('radius-group') as HTMLDivElement,
        angularVelocity: document.getElementById('angular-velocity-group') as HTMLDivElement,
        linearVelocity: document.getElementById('linear-velocity-group') as HTMLDivElement,
        period: document.getElementById('period-group') as HTMLDivElement,
        frequency: document.getElementById('frequency-group') as HTMLDivElement,
        centripetalAcceleration: document.getElementById('centripetal-acceleration-group') as HTMLDivElement,
        time: document.getElementById('time-group') as HTMLDivElement,
        angularDisplacement: document.getElementById('angular-displacement-group') as HTMLDivElement,
      };
      
      const inputs = {
        radius: document.getElementById('radius') as HTMLInputElement,
        angularVelocity: document.getElementById('angular-velocity') as HTMLInputElement,
        linearVelocity: document.getElementById('linear-velocity') as HTMLInputElement,
        period: document.getElementById('period') as HTMLInputElement,
        frequency: document.getElementById('frequency') as HTMLInputElement,
        centripetalAcceleration: document.getElementById('centripetal-acceleration') as HTMLInputElement,
        time: document.getElementById('time') as HTMLInputElement,
        angularDisplacement: document.getElementById('angular-displacement') as HTMLInputElement
      };
      
      const unitSelectors = {
        radius: document.getElementById('radius-unit') as HTMLSelectElement,
        angularVelocity: document.getElementById('angular-velocity-unit') as HTMLSelectElement,
        linearVelocity: document.getElementById('linear-velocity-unit') as HTMLSelectElement,
        period: document.getElementById('period-unit') as HTMLSelectElement,
        frequency: document.getElementById('frequency-unit') as HTMLSelectElement,
        centripetalAcceleration: document.getElementById('centripetal-acceleration-unit') as HTMLSelectElement,
        time: document.getElementById('time-unit') as HTMLSelectElement,
        angularDisplacement: document.getElementById('angular-displacement-unit') as HTMLSelectElement
      };
           
      function updateVisibleFields() {
        const variableToSolve = variableToSolveSelect.value;
        
        for (const key in inputGroups) {
          if (Object.prototype.hasOwnProperty.call(inputGroups, key)) {
            inputGroups[key as keyof typeof inputGroups].style.display = 'block';
          }
        }
        
        if (variableToSolve in inputGroups) {
          inputGroups[variableToSolve as keyof typeof inputGroups].style.display = 'none';
        }

        switch (variableToSolve) {
          case 'angularDisplacement':
            inputGroups.time.style.display = 'block';
            break;
          case 'time':
            inputGroups.angularDisplacement.style.display = 'block';
            break;
          default:
            if (variableToSolve !== 'time' && variableToSolve !== 'angularDisplacement') {
              inputGroups.time.style.display = 'none';
              inputGroups.angularDisplacement.style.display = 'none';
            }
        }
      }
      
      variableToSolveSelect.addEventListener('change', updateVisibleFields);
      
      calculateBtn.addEventListener('click', function() {
        const variableToSolve = variableToSolveSelect.value;
        const values: Record<string, number> = {};
        const selectedUnits: Record<string, string> = {};
        
        // Recoger valores y unidades seleccionadas
        for (const key in inputs) {
          if (Object.prototype.hasOwnProperty.call(inputs, key) && 
              key !== variableToSolve && 
              !inputGroups[key as keyof typeof inputGroups].style.display.includes('none')) {
            
            const inputValue = parseFloat(inputs[key as keyof typeof inputs].value);
            const unitSelected = unitSelectors[key as keyof typeof unitSelectors].value;
            
            if (!isNaN(inputValue) && inputValue !== 0) {
              // Guardar la unidad seleccionada para mostrarla en el resultado
              selectedUnits[key] = unitSelected;
              
              // Convertir a unidad base (SI) para cálculos
              values[key] = convertToBaseUnit(inputValue, key as UnitType, unitSelected);
              console.log(`Convertido ${key}: ${inputValue} ${unitSelected} → ${values[key]} (unidad base)`);
            }
          }
        }
        
        const result = calculate(variableToSolve, values);
        
        if (result.value !== null) {
          // Obtener la unidad seleccionada para el resultado
          const resultUnitSelected = variableToSolve in unitSelectors ? 
                                     unitSelectors[variableToSolve as keyof typeof unitSelectors].value : 
                                     result.unit;
          
          // Convertir el resultado de unidad base a unidad seleccionada
          const displayValue = variableToSolve in unitSelectors ? 
                              convertFromBaseUnit(result.value, variableToSolve as UnitType, resultUnitSelected) :
                              result.value;
                              
          console.log(`Resultado convertido: ${result.value} (unidad base) → ${displayValue} ${resultUnitSelected}`);
          
          resultDiv.innerHTML = `${result.name} = <strong>${displayValue.toFixed(4)} ${resultUnitSelected}</strong>`;
          formulaUsedDiv.innerHTML = `Fórmula: ${result.formula}`;
        } else {
          resultDiv.innerHTML = 'No se pudo calcular. Por favor, revisa los datos ingresados.';
          formulaUsedDiv.innerHTML = '';
        }
      });
      
      updateVisibleFields();
    });
  </script>
</CalculatorLayout>
