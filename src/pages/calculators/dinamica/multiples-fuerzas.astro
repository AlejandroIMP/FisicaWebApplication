---
import FormulasContainer from "../../../components/calculator/FormulasContainer.astro"
import FormulaItem from "../../../components/calculator/FormulaItem.astro"
import CalculatorLayout from "../../../layouts/CalculatorLayout.astro"

title: "Calculadora de M√∫ltiples Fuerzas"
description: "Calculadora para analizar el efecto de m√∫ltiples fuerzas aplicadas a un objeto usando la Segunda Ley de Newton"

---
<CalculatorLayout title="Calculadora de M√∫ltiples Fuerzas" icon="‚öñÔ∏è">

<div class="calculator-container">
  <div class="calculator-header">
    <h1>Calculadora de M√∫ltiples Fuerzas</h1>
    <p>Analiza el efecto de m√∫ltiples fuerzas aplicadas a un objeto</p>
  </div>

  <!-- Secci√≥n de fuerzas -->
  <div class="forces-section">
    <div class="section-header">
      <h2>Gesti√≥n de Fuerzas</h2>
      <div class="force-counter">
        Fuerzas definidas: <span id="force-count">0</span>
      </div>
    </div>

    <!-- Formulario para a√±adir fuerzas -->
    <div class="add-force-form">
      <div class="input-row">
        <div class="input-group">
          <label for="force-magnitude">Magnitud (N):</label>
          <input type="number" id="force-magnitude" step="0.1" min="0" placeholder="Ej: 10">
        </div>
        
        <div class="input-group">
          <label for="force-angle">√Ångulo (¬∞):</label>
          <input type="number" id="force-angle" step="1" min="0" max="360" placeholder="Ej: 45">
        </div>
        
        <div class="input-group">
          <label for="force-name">Nombre (opcional):</label>
          <input type="text" id="force-name" placeholder="Ej: Fricci√≥n">
        </div>
      </div>
      
      <div class="button-row">
        <button type="button" id="add-force-btn" class="btn btn-primary">
          <span class="btn-icon">+</span>
          A√±adir Fuerza
        </button>
        
        <button type="button" id="add-multiple-forces-btn" class="btn btn-secondary">
          <span class="btn-icon">‚ö°</span>
          A√±adir 3 Fuerzas
        </button>
        
        <button type="button" id="clear-forces-btn" class="btn btn-danger">
          <span class="btn-icon">üóëÔ∏è</span>
          Limpiar Todo
        </button>
      </div>
    </div>

    <!-- Lista de fuerzas -->
    <div id="forces-list" class="forces-list">
      <p class="no-forces">No hay fuerzas definidas. A√±ade algunas fuerzas para comenzar el c√°lculo.</p>
    </div>
  </div>

  <!-- Calculadora principal -->
  <div class="calculator-main">
    <div class="variable-selector">
      <label for="variable-to-solve">Variable a calcular:</label>
      <select id="variable-to-solve">
        <option value="netForce">Fuerza Neta (N)</option>
        <option value="acceleration">Aceleraci√≥n (m/s¬≤)</option>
        <option value="mass">Masa (kg)</option>
      </select>
    </div>

    <!-- Campos de entrada -->
    <div class="input-groups">
      <div id="mass-group" class="input-group">
        <label for="mass">Masa:</label>
        <div class="input-with-unit">
          <input type="number" id="mass" step="0.01" min="0" placeholder="Ej: 5">
          <select id="mass-unit">
            <option value="kg">kg</option>
            <option value="g">g</option>
            <option value="lb">lb</option>
          </select>
        </div>
      </div>

      <div id="acceleration-group" class="input-group">
        <label for="acceleration">Aceleraci√≥n:</label>
        <div class="input-with-unit">
          <input type="number" id="acceleration" step="0.01" placeholder="Ej: 2">
          <select id="acceleration-unit">
            <option value="m/s¬≤">m/s¬≤</option>
            <option value="ft/s¬≤">ft/s¬≤</option>
          </select>
        </div>
      </div>

      <div id="netForce-group" class="input-group">
        <label for="netForce">Fuerza Neta:</label>
        <div class="input-with-unit">
          <input type="number" id="netForce" step="0.01" placeholder="Calculada autom√°ticamente">
          <select id="netForce-unit">
            <option value="N">N</option>
            <option value="kN">kN</option>
            <option value="lbf">lbf</option>
          </select>
        </div>
      </div>
    </div>

    <button id="calculate-btn" class="btn btn-calculate">
      <span class="btn-icon">‚ö°</span>
      Calcular
    </button>

    <!-- Resultados -->
    <div class="results-section">
      <div id="result" class="result"></div>
      <div id="formula-used" class="formula"></div>
      
      <!-- Resultados detallados -->
      <div id="detailed-results" class="detailed-results" style="display: none;">
        <h3>An√°lisis Detallado</h3>
        <div id="components-display" class="components"></div>
        <div id="force-diagram" class="diagram"></div>
        <div id="calculation-steps" class="steps"></div>
      </div>
    </div>
    <FormulasContainer
      title="F√≥rmulas para M√∫ltiples Fuerzas"
      icon="‚öñÔ∏è"
    >
      
      <FormulaItem 
        formula="F_net = Œ£F" 
        description="Fuerza neta como suma vectorial de todas las fuerzas"
        example="Para fuerzas en 2D: F_net = ‚àö(Fx¬≤ + Fy¬≤)" 
      />
      <FormulaItem 
        formula="F_net = F_aplicada - F_fricci√≥n" 
        description="Fuerza neta en una direcci√≥n con fricci√≥n"
        example="Si F_ap = 50N y F_f = 20N, entonces F_net = 30N" 
      />
      <FormulaItem 
        formula="F_net = mg¬∑sin(Œ∏) - Œº¬∑mg¬∑cos(Œ∏)" 
        description="Fuerza neta en plano inclinado con fricci√≥n"
        example="Para objeto en rampa con fricci√≥n" 
      />
    </FormulasContainer>
  </div>
</div>
</CalculatorLayout>

<style>
  .calculator-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .calculator-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .calculator-header h1 {
    color: var(--primary-color);
    margin-bottom: 0.5rem;
  }

  .forces-section {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border: 1px solid #e2e8f0;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .section-header h2 {
    margin: 0;
    color: var(--primary-color);
  }

  .force-counter {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-weight: 500;
    font-size: 0.9rem;
  }

  .add-force-form {
    background: #f8fafc;
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
  }

  .input-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .input-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .input-group label {
    font-weight: 500;
    color: #374151;
  }

  .input-group input {
    padding: 0.75rem;
    border: 2px solid #e2e8f0;
    border-radius: 6px;
    font-size: 1rem;
    transition: border-color 0.2s ease;
  }

  .input-group input:focus {
    outline: none;
    border-color: var(--primary-color);
  }

  .button-row {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
  }

  .btn-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }

  .btn-secondary {
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    color: white;
  }

  .btn-danger {
    background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
    color: white;
  }

  .btn-calculate {
    background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    color: white;
    font-size: 1.1rem;
    padding: 1rem 2rem;
    width: 100%;
    margin: 1.5rem 0;
  }

  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .forces-list {
    min-height: 100px;
    border: 2px dashed #e2e8f0;
    border-radius: 8px;
    padding: 1rem;
  }

  .no-forces {
    text-align: center;
    color: #6b7280;
    font-style: italic;
    margin: 0;
  }

  .force-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: white;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    padding: 1rem;
    margin-bottom: 0.5rem;
    transition: all 0.2s ease;
  }

  .force-item:hover {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transform: translateY(-1px);
  }

  .force-info {
    display: flex;
    gap: 1rem;
    align-items: center;
    flex-wrap: wrap;
  }

  .force-label {
    font-weight: 600;
    color: var(--primary-color);
  }

  .force-magnitude {
    font-weight: 500;
    color: #1f2937;
  }

  .force-angle {
    color: #6b7280;
  }

  .force-name {
    color: #9ca3af;
    font-style: italic;
  }

  .remove-force-btn {
    background: #ef4444;
    color: white;
    border: none;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 0.9rem;
    transition: all 0.2s ease;
  }

  .remove-force-btn:hover {
    background: #dc2626;
    transform: scale(1.1);
  }

  .calculator-main {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border: 1px solid #e2e8f0;
  }

  .variable-selector {
    margin-bottom: 1.5rem;
  }

  .variable-selector label {
    display: block;
    font-weight: 500;
    color: #374151;
    margin-bottom: 0.5rem;
  }

  .variable-selector select {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid #e2e8f0;
    border-radius: 6px;
    font-size: 1rem;
    background: white;
  }

  .input-groups {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .input-with-unit {
    display: flex;
    gap: 0.5rem;
  }

  .input-with-unit input {
    flex: 1;
  }

  .input-with-unit select {
    width: 80px;
    padding: 0.75rem 0.5rem;
    border: 2px solid #e2e8f0;
    border-radius: 6px;
    background: white;
  }

  .results-section {
    margin-top: 1.5rem;
  }

  .result {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1.5rem;
    border-radius: 8px;
    font-size: 1.2rem;
    font-weight: 600;
    text-align: center;
    margin-bottom: 1rem;
    min-height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .formula {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    padding: 1rem;
    border-radius: 6px;
    font-family: 'Courier New', monospace;
    text-align: center;
    color: #374151;
  }

  .detailed-results {
    margin-top: 1.5rem;
    padding: 1.5rem;
    background: #f8fafc;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
  }

  .detailed-results h3 {
    margin-top: 0;
    color: var(--primary-color);
  }

  .components, .steps {
    margin-top: 1rem;
    padding: 1rem;
    background: white;
    border-radius: 6px;
    border: 1px solid #e2e8f0;
  }

  .steps {
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
    line-height: 1.6;
    white-space: pre-line;
  }

  @media (max-width: 768px) {
    .calculator-container {
      padding: 1rem;
    }

    .input-row {
      grid-template-columns: 1fr;
    }

    .button-row {
      flex-direction: column;
    }

    .btn {
      width: 100%;
      justify-content: center;
    }

    .force-info {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .section-header {
      flex-direction: column;
      text-align: center;
    }
  }

  .notification {
    animation: slideIn 0.3s ease;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  import { setupCalculator } from '../../../utils/calculators/calculator-controller';
  import { 
    calculateMultipleForces, 
    initializeMultipleForces 
  } from '../../../utils/calculators/multiple-forces-standalone-calculator';

  // Funci√≥n wrapper que conecta el estado global con setupCalculator
  function calculateMultipleForcesWrapper(variableToSolve: string, inputs: Record<string, number>) {
    const result = calculateMultipleForces(variableToSolve, inputs);
    
    // Guardar resultado inmediatamente para an√°lisis detallado
    (window as any).lastCalculationResult = result;
    
    // Mostrar resultados detallados autom√°ticamente
    setTimeout(() => {
      showDetailedResults();
    }, 50);
    
    return result;
  }

  // Configuraci√≥n para el setupCalculator
  const config = {
    calculateFunction: calculateMultipleForcesWrapper,
    variableGroups: {
      'netForce': ['mass', 'acceleration'],
      'acceleration': ['mass'],
      'mass': ['acceleration']
    }
  };

  // Inicializar cuando el DOM est√© listo
  document.addEventListener('DOMContentLoaded', () => {
    initializeMultipleForces();
    setupCalculator(config);
  });

  function showDetailedResults() {
    const result = (window as any).lastCalculationResult;
    if (!result || !result.components) return;

    const detailedResults = document.getElementById('detailed-results');
    const componentsDisplay = document.getElementById('components-display');
    const stepsDisplay = document.getElementById('calculation-steps');

    if (detailedResults && componentsDisplay && stepsDisplay) {
      detailedResults.style.display = 'block';

      // Mostrar componentes
      const angle = Math.atan2(result.components.y, result.components.x) * (180 / Math.PI);
      const normalizedAngle = angle < 0 ? angle + 360 : angle;
      
      componentsDisplay.innerHTML = `
        <h4>Componentes de la Fuerza Neta:</h4>
        <p><strong>Componente X:</strong> ${result.components.x.toFixed(2)} N</p>
        <p><strong>Componente Y:</strong> ${result.components.y.toFixed(2)} N</p>
        <p><strong>Magnitud:</strong> ${result.result ? result.result.toFixed(2) : '0'} N</p>
        <p><strong>√Ångulo:</strong> ${normalizedAngle.toFixed(2)}¬∞</p>
        <p><strong>Fuerzas utilizadas:</strong> ${result.forces ? result.forces.length : 0}</p>
      `;

      // Mostrar pasos si est√°n disponibles
      if (result.steps && result.steps.length > 0) {
        stepsDisplay.innerHTML = `
          <h4>Pasos del C√°lculo:</h4>
          <div class="steps-content">${result.steps.join('\n')}</div>
        `;
      } else {
        stepsDisplay.innerHTML = `
          <h4>Pasos del C√°lculo:</h4>
          <p>No hay pasos disponibles para mostrar.</p>
        `;
      }
    }
  }

  // Funci√≥n para actualizar resultados cuando se a√±aden/eliminan fuerzas
  function updateCalculationWhenForcesChange() {
    const variableToSolveSelect = document.getElementById('variable-to-solve') as HTMLSelectElement;
    const massInput = document.getElementById('mass') as HTMLInputElement;
    const accelerationInput = document.getElementById('acceleration') as HTMLInputElement;
    
    if (!variableToSolveSelect) return;
    
    const variableToSolve = variableToSolveSelect.value;
    const inputs: Record<string, number> = {};
    
    // Recopilar inputs seg√∫n la variable a resolver
    if (variableToSolve !== 'mass' && massInput?.value) {
      inputs.mass = parseFloat(massInput.value);
    }
    
    if (variableToSolve !== 'acceleration' && accelerationInput?.value) {
      inputs.acceleration = parseFloat(accelerationInput.value);
    }
    
    // Solo calcular autom√°ticamente para fuerza neta si hay fuerzas definidas
    if (variableToSolve === 'netForce') {
      const result = calculateMultipleForcesWrapper(variableToSolve, inputs);
      
      // Actualizar display de resultado
      const resultDiv = document.getElementById('result') as HTMLDivElement;
      const formulaUsedDiv = document.getElementById('formula-used') as HTMLDivElement;
      
      if (resultDiv && formulaUsedDiv) {
        if (result.result !== null && !isNaN(result.result)) {
          resultDiv.innerHTML = `${result.name} = <strong>${result.result.toFixed(4)} ${result.unit}</strong>`;
          formulaUsedDiv.innerHTML = `F√≥rmula: ${result.formula}`;
        } else {
          resultDiv.innerHTML = 'A√±ade fuerzas para calcular la fuerza neta';
          formulaUsedDiv.innerHTML = '';
        }
      }
    }
  }

  // Extender las funciones globales para actualizar c√°lculos autom√°ticamente
  const originalAddForce = (window as any).addForce;
  const originalRemoveForce = (window as any).removeForce;
  const originalClearForces = (window as any).clearForces;

  if (typeof originalAddForce === 'function') {
    (window as any).addForce = function(...args: any[]) {
      originalAddForce.apply(this, args);
      setTimeout(updateCalculationWhenForcesChange, 100);
    };
  }

  if (typeof originalRemoveForce === 'function') {
    (window as any).removeForce = function(...args: any[]) {
      originalRemoveForce.apply(this, args);
      setTimeout(updateCalculationWhenForcesChange, 100);
    };
  }

  if (typeof originalClearForces === 'function') {
    (window as any).clearForces = function(...args: any[]) {
      originalClearForces.apply(this, args);
      setTimeout(updateCalculationWhenForcesChange, 100);
    };
  }

  declare global {
    interface Window {
      lastCalculationResult: any;
    }
  }
</script>
