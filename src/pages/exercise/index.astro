---
import Layout from "../../layouts/Layout.astro";
import { getCollection } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";

// Obtener todos los ejercicios
const exercises = (await getCollection('exercise')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

// Extraer valores únicos para los filtros
const topics = [...new Set(exercises.map(ex => ex.data.topic).filter(Boolean))];
const difficulties = ['Facil', 'Medio', 'Dificil'];
const educationLevels = ['Secundaria', 'Bachillerato', 'Universidad'];
const exerciseTypes = ['example', 'challenge'];
---

<Layout title="Ejercicios de Física Mecánica" description="Colección de ejercicios de física mecánica con soluciones paso a paso">
  <section class="exercises-section">
    <h1>Ejercicios de Física Mecánica</h1>
    
    <div class="filter-container">
      <form id="filter-form" class="filter-form">
        <div class="filter-controls">
          <div class="filter-group">
            <label for="search-exercises">Buscar ejercicios</label>
            <input 
              type="text" 
              id="search-exercises" 
              placeholder="Buscar por título o descripción..." 
            />
          </div>

          <div class="filter-row">
            <div class="filter-group">
              <label for="topic-filter">Tema</label>
              <select id="topic-filter">
                <option value="">Todos los temas</option>
                {topics.map(topic => (
                  <option value={topic}>{topic ? topic.charAt(0).toUpperCase() + topic.slice(1) : ''}</option>
                ))}
              </select>
            </div>

            <div class="filter-group">
              <label for="difficulty-filter">Dificultad</label>
              <select id="difficulty-filter">
                <option value="">Cualquier dificultad</option>
                {difficulties.map(diff => (
                  <option value={diff}>{diff}</option>
                ))}
              </select>
            </div>

            <div class="filter-group">
              <label for="type-filter">Tipo</label>
              <select id="type-filter">
                <option value="">Todos los tipos</option>
                <option value="example">Ejercicios resueltos</option>
                <option value="challenge">Ejercicios para resolver</option>
              </select>
            </div>

            <div class="filter-group">
              <label for="education-level-filter">Nivel educativo</label>
              <select id="education-level-filter">
                <option value="">Todos los niveles</option>
                {educationLevels.map(level => (
                  <option value={level}>{level}</option>
                ))}
              </select>
            </div>

            <div class="filter-group">
              <label for="sort-option">Ordenar por</label>
              <select id="sort-option">
                <option value="date-desc">Más recientes primero</option>
                <option value="date-asc">Más antiguos primero</option>
                <option value="title-asc">Título (A-Z)</option>
                <option value="title-desc">Título (Z-A)</option>
              </select>
            </div>
          </div>
        </div>

        <div class="filter-actions">
          <button id="reset-filters" type="button" class="button secondary">Restablecer filtros</button>
        </div>
      </form>
      <div class="results-info">
        <span id="exercise-counter">Mostrando {exercises.length} ejercicios</span>
      </div>
    </div>

    <ul id="exercise-list" class="exercise-grid">
      {exercises.map((exercise) => (
        <li 
          class="exercise-item" 
          data-topic={exercise.data.topic || ""} 
          data-difficulty={exercise.data.difficulty || ""} 
          data-type={exercise.data.type || ""} 
          data-education-level={exercise.data.educationLevel || ""}
          data-date={exercise.data.pubDate}
          data-description={exercise.data.description}
        >
          <a href={`/exercise/${exercise.id}/`}>
            {exercise.data.heroImage && 
              <div class="img-container">
                <img width={720} height={360} src={exercise.data.heroImage} alt="" />
                <div class="exercise-tags">
                  {exercise.data.type === 'example' ? 
                    <span class="tag type-tag">Ejercicio resuelto</span> : 
                    <span class="tag type-tag challenge">Ejercicio para resolver</span>
                  }
                  {exercise.data.difficulty && 
                    <span class={`tag difficulty-tag ${exercise.data.difficulty.toLowerCase()}`}>
                      {exercise.data.difficulty}
                    </span>
                  }
                </div>
              </div>
            }
            <div class="exercise-content">
              <h2 class="title">{exercise.data.title}</h2>
              <p class="description">{exercise.data.description}</p>
              <div class="exercise-meta">
                {exercise.data.topic && <span class="topic-badge">{exercise.data.topic}</span>}
                <p class="date">
                  <FormattedDate date={exercise.data.pubDate} />
                </p>
              </div>
            </div>
          </a>
        </li>
      ))}
    </ul>
  </section>  
</Layout>

<script src="/src/scripts/exercise-filter.js"></script>
<style>
  main {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  .exercises-section {
    padding: 2rem 0;
  }
  
  /* Estilos para los filtros */
  .filter-container {
    background-color: #f9f9f9;
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
  }
  
  .filter-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .filter-controls {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .filter-row {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    align-items: flex-end;
  }
  
  .filter-group {
    flex: 1;
    min-width: 150px;
    margin-bottom: 0.5rem;
  }
  
  .filter-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    font-size: 0.9rem;
  }
  
  .filter-group select,
  .filter-group input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    background-color: white;
    font-size: 0.95rem;
  }
  
  .filter-actions {
    display: flex;
    justify-content: flex-end;
    margin-top: 1rem;
  }
  
  .button {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    font-size: 0.95rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .button.secondary {
    background-color: #f0f0f0;
    color: #333;
  }
  
  .button.secondary:hover {
    background-color: #e0e0e0;
  }
  
  .results-info {
    margin-top: 1rem;
    font-size: 0.9rem;
    color: #666;
  }
  
  /* Estilos para la cuadrícula de ejercicios */
  .exercise-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    list-style-type: none;
    margin: 0;
    padding: 0;
  }
  
  .exercise-item {
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    background-color: white;
  }
  
  .exercise-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  }
  
  .exercise-item a {
    display: flex;
    flex-direction: column;
    height: 100%;
    text-decoration: none;
    color: inherit;
  }
  
  .img-container {
    position: relative;
    width: 100%;
    padding-top: 56.25%; /* 16:9 aspect ratio */
    overflow: hidden;
  }
  
  .img-container img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }
  
  .exercise-item:hover .img-container img {
    transform: scale(1.05);
  }
  
  .exercise-tags {
    position: absolute;
    top: 10px;
    right: 10px;
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: flex-end;
  }
  
  .tag {
    padding: 0.35rem 0.75rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
    color: white;
    white-space: nowrap;
  }
  
  .type-tag {
    background-color: #2b6cb0;
  }
  
  .type-tag.challenge {
    background-color: #c05621;
  }
  
  .difficulty-tag {
    background-color: #38a169;
  }
  
  .difficulty-tag.facil {
    background-color: #38a169;
  }
  
  .difficulty-tag.medio {
    background-color: #dd6b20;
  }
  
  .difficulty-tag.dificil {
    background-color: #e53e3e;
  }
  
  .exercise-content {
    padding: 1.25rem;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }
  
  .title {
    margin: 0 0 0.75rem 0;
    font-size: 1.25rem;
    line-height: 1.3;
    color: #1a202c;
  }
  
  .description {
    margin: 0 0 1rem 0;
    font-size: 0.95rem;
    line-height: 1.5;
    color: #4a5568;
    flex-grow: 1;
  }
  
  .exercise-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.85rem;
    margin-top: auto;
  }
  
  .topic-badge {
    background-color: #e2e8f0;
    color: #4a5568;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
  }
  
  .date {
    margin: 0;
    color: #718096;
    font-size: 0.85rem;
  }
  
  .no-results {
    grid-column: 1 / -1;
    text-align: center;
    padding: 2rem;
    color: #718096;
    font-size: 1.1rem;
  }
  
  @media (max-width: 768px) {
    .filter-row {
      flex-direction: column;
    }
    
    .filter-group {
      width: 100%;
    }
    
    .exercise-grid {
      grid-template-columns: 1fr;
    }
  }
</style>